// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Job v1 job
// swagger:model V1.Job
type V1Job struct {

	// Job id
	ID string `json:"id,omitempty"`

	// Report id if job succeded
	ReportID string `json:"report_id,omitempty"`

	// Job state
	State string `json:"state,omitempty"`
}

// Validate validates this v1 job
func (m *V1Job) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1JobTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["starting","running","succeded","aborted","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1JobTypeStatePropEnum = append(v1JobTypeStatePropEnum, v)
	}
}

const (
	// V1JobStateStarting captures enum value "starting"
	V1JobStateStarting string = "starting"
	// V1JobStateRunning captures enum value "running"
	V1JobStateRunning string = "running"
	// V1JobStateSucceded captures enum value "succeded"
	V1JobStateSucceded string = "succeded"
	// V1JobStateAborted captures enum value "aborted"
	V1JobStateAborted string = "aborted"
	// V1JobStateFailed captures enum value "failed"
	V1JobStateFailed string = "failed"
)

// prop value enum
func (m *V1Job) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v1JobTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V1Job) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Job) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Job) UnmarshalBinary(b []byte) error {
	var res V1Job
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
