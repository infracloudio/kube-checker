// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetJobStatusHandlerFunc turns a function with the right signature into a get job status handler
type GetJobStatusHandlerFunc func(GetJobStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetJobStatusHandlerFunc) Handle(params GetJobStatusParams) middleware.Responder {
	return fn(params)
}

// GetJobStatusHandler interface for that can handle valid get job status params
type GetJobStatusHandler interface {
	Handle(GetJobStatusParams) middleware.Responder
}

// NewGetJobStatus creates a new http.Handler for the get job status operation
func NewGetJobStatus(ctx *middleware.Context, handler GetJobStatusHandler) *GetJobStatus {
	return &GetJobStatus{Context: ctx, Handler: handler}
}

/*GetJobStatus swagger:route GET /v1/job_status/{job_id} getJobStatus

Get Report


*/
type GetJobStatus struct {
	Context *middleware.Context
	Handler GetJobStatusHandler
}

func (o *GetJobStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetJobStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
